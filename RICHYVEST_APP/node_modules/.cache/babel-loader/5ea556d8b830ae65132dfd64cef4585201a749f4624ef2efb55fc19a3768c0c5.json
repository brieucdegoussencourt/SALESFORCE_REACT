{"ast":null,"code":"var _jsxFileName = \"/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst generateDateRange = (startDate, endDate) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const dates = [];\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n  return dates;\n};\nconst InvestmentChart = () => {\n  _s();\n  const [inputAmount, setInputAmount] = useState(1000); // Example input amount\n  const [calculatedResult, setCalculatedResult] = useState(1500); // Example calculated result\n\n  const inputDate = '01/2022'; // Example input date in MM/YYYY format\n  const todayDate = new Date();\n  const endDate = `${todayDate.getMonth() + 1 < 10 ? '0' : ''}${todayDate.getMonth() + 1}/${todayDate.getFullYear()}`;\n  const dateRange = generateDateRange(inputDate, endDate);\n  const chartData = {\n    labels: dateRange,\n    datasets: [{\n      label: 'Investment Return',\n      data: [inputAmount, calculatedResult],\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(255, 255, 255, 1)',\n      // Changed to white\n      fill: true\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(InvestmentChart, \"VEn5h4Ln1x9M35dXxArvgMzK1yk=\");\n_c = InvestmentChart;\nexport default InvestmentChart;\nvar _c;\n$RefreshReg$(_c, \"InvestmentChart\");","map":{"version":3,"names":["React","useState","Line","Chart","registerables","jsxDEV","_jsxDEV","register","generateDateRange","startDate","endDate","start","Date","end","dates","month","getMonth","year","getFullYear","push","setMonth","InvestmentChart","_s","inputAmount","setInputAmount","calculatedResult","setCalculatedResult","inputDate","todayDate","dateRange","chartData","labels","datasets","label","data","borderColor","backgroundColor","fill","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\nconst generateDateRange = (startDate: string, endDate: string) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const dates = [];\n\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n\n  return dates;\n};\n\nconst InvestmentChart: React.FC = () => {\n  const [inputAmount, setInputAmount] = useState<number>(1000); // Example input amount\n  const [calculatedResult, setCalculatedResult] = useState<number>(1500); // Example calculated result\n\n  const inputDate = '01/2022'; // Example input date in MM/YYYY format\n  const todayDate = new Date();\n  const endDate = `${todayDate.getMonth() + 1 < 10 ? '0' : ''}${todayDate.getMonth() + 1}/${todayDate.getFullYear()}`;\n\n  const dateRange = generateDateRange(inputDate, endDate);\n\n  const chartData = {\n    labels: dateRange,\n    datasets: [\n      {\n        label: 'Investment Return',\n        data: [inputAmount, calculatedResult],\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(255, 255, 255, 1)', // Changed to white\n        fill: true,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default InvestmentChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhDH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAEhC,MAAMI,iBAAiB,GAAGA,CAACC,SAAiB,EAAEC,OAAe,KAAK;EAChE,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACH,SAAS,CAAC;EACjC,MAAMI,GAAG,GAAG,IAAID,IAAI,CAACF,OAAO,CAAC;EAC7B,MAAMI,KAAK,GAAG,EAAE;EAEhB,OAAOH,KAAK,IAAIE,GAAG,EAAE;IACnB,MAAME,KAAK,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC;IAClC,MAAMC,IAAI,GAAGN,KAAK,CAACO,WAAW,CAAC,CAAC;IAChCJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGA,KAAK,IAAIE,IAAI,EAAE,CAAC;IACtDN,KAAK,CAACS,QAAQ,CAACT,KAAK,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EACtC;EAEA,OAAOF,KAAK;AACd,CAAC;AAED,MAAMO,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAS,IAAI,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACwB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzB,QAAQ,CAAS,IAAI,CAAC,CAAC,CAAC;;EAExE,MAAM0B,SAAS,GAAG,SAAS,CAAC,CAAC;EAC7B,MAAMC,SAAS,GAAG,IAAIhB,IAAI,CAAC,CAAC;EAC5B,MAAMF,OAAO,GAAG,GAAGkB,SAAS,CAACZ,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGY,SAAS,CAACZ,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAIY,SAAS,CAACV,WAAW,CAAC,CAAC,EAAE;EAEnH,MAAMW,SAAS,GAAGrB,iBAAiB,CAACmB,SAAS,EAAEjB,OAAO,CAAC;EAEvD,MAAMoB,SAAS,GAAG;IAChBC,MAAM,EAAEF,SAAS;IACjBG,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,mBAAmB;MAC1BC,IAAI,EAAE,CAACX,WAAW,EAAEE,gBAAgB,CAAC;MACrCU,WAAW,EAAE,uBAAuB;MACpCC,eAAe,EAAE,wBAAwB;MAAE;MAC3CC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;EAED,oBACE/B,OAAA;IAAAgC,QAAA,eACEhC,OAAA,CAACJ,IAAI;MAACgC,IAAI,EAAEJ;IAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAACpB,EAAA,CA5BID,eAAyB;AAAAsB,EAAA,GAAzBtB,eAAyB;AA8B/B,eAAeA,eAAe;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}