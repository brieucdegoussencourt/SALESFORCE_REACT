{"ast":null,"code":"var _jsxFileName = \"/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst generateDateRange = (startDate, endDate) => {\n  console.log('Generating date range from', startDate, 'to', endDate);\n\n  // Convert startDate from 'MM/YYYY' to 'YYYY-MM-DD'\n  const [month, year] = startDate.split('/');\n  const start = new Date(`${year}-${month}-01`);\n  const end = new Date(endDate);\n  const dates = [];\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n    console.error('Invalid date(s) provided:', {\n      startDate,\n      endDate\n    });\n    return dates;\n  }\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n  console.log('Generated dates:', dates);\n  return dates;\n};\nconst InvestmentChart = ({\n  startDate,\n  initialInvestment,\n  finalValue\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    console.log('useEffect triggered');\n    const dateRange = generateDateRange(startDate, new Date().toISOString().slice(0, 10));\n    if (!dateRange || dateRange.length === 0) {\n      console.log('Date range is empty or undefined');\n      return;\n    }\n    const dataPoints = dateRange.map((date, index) => {\n      if (index === 0) return initialInvestment;\n      if (index === dateRange.length - 1) return finalValue;\n      return initialInvestment + (finalValue - initialInvestment) / (dateRange.length - 1) * index; // Interpolated values\n    });\n    console.log('Date Range:', dateRange);\n    console.log('Data Points:', dataPoints);\n    setChartData({\n      labels: dateRange,\n      datasets: [{\n        label: 'Investment Return',\n        data: dataPoints,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        // Set to a transparent color\n        fill: true\n      }]\n    });\n  }, [startDate, initialInvestment, finalValue]);\n  const options = {\n    scales: {\n      x: {\n        type: 'category' // Ensure type is a specific string literal\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: 'white',\n      padding: '1rem',\n      border\n    },\n    children: chartData.labels && chartData.datasets ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(InvestmentChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = InvestmentChart;\nexport default InvestmentChart;\nvar _c;\n$RefreshReg$(_c, \"InvestmentChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","registerables","jsxDEV","_jsxDEV","register","generateDateRange","startDate","endDate","console","log","month","year","split","start","Date","end","dates","isNaN","getTime","error","getMonth","getFullYear","push","setMonth","InvestmentChart","initialInvestment","finalValue","_s","chartData","setChartData","dateRange","toISOString","slice","length","dataPoints","map","date","index","labels","datasets","label","data","borderColor","backgroundColor","fill","options","scales","x","type","style","padding","border","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\nconst generateDateRange = (startDate: string, endDate: string): string[] => {\n  console.log('Generating date range from', startDate, 'to', endDate);\n\n  // Convert startDate from 'MM/YYYY' to 'YYYY-MM-DD'\n  const [month, year] = startDate.split('/');\n  const start = new Date(`${year}-${month}-01`);\n  const end = new Date(endDate);\n  const dates: string[] = [];\n\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n    console.error('Invalid date(s) provided:', { startDate, endDate });\n    return dates;\n  }\n\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n\n  console.log('Generated dates:', dates);\n  return dates;\n};\n\ninterface InvestmentChartProps {\n  startDate: string;\n  initialInvestment: number;\n  finalValue: number;\n}\n\nconst InvestmentChart: React.FC<InvestmentChartProps> = ({ startDate, initialInvestment, finalValue }) => {\n  const [chartData, setChartData] = useState<any>({});\n\n  useEffect(() => {\n    console.log('useEffect triggered');\n\n    const dateRange = generateDateRange(startDate, new Date().toISOString().slice(0, 10));\n    if (!dateRange || dateRange.length === 0) {\n      console.log('Date range is empty or undefined');\n      return;\n    }\n\n    const dataPoints = dateRange.map((date, index) => {\n      if (index === 0) return initialInvestment;\n      if (index === dateRange.length - 1) return finalValue;\n      return initialInvestment + ((finalValue - initialInvestment) / (dateRange.length - 1)) * index; // Interpolated values\n    });\n\n    console.log('Date Range:', dateRange);\n    console.log('Data Points:', dataPoints);\n\n    setChartData({\n      labels: dateRange,\n      datasets: [\n        {\n          label: 'Investment Return',\n          data: dataPoints,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)', // Set to a transparent color\n          fill: true,\n        },\n      ],\n    });\n  }, [startDate, initialInvestment, finalValue]);\n\n  const options = {\n    scales: {\n      x: {\n        type: 'category' as const, // Ensure type is a specific string literal\n      },\n    },\n  };\n\n  return (\n    <div style={{ backgroundColor: 'white', padding: '1rem', border }}>\n      {chartData.labels && chartData.datasets ? (\n        <Line data={chartData} options={options} />\n      ) : (\n        <p>Loading chart...</p>\n      )}\n    </div>\n  );\n};\n\nexport default InvestmentChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}