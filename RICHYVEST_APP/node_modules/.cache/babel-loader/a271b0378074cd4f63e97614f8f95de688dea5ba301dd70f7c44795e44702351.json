{"ast":null,"code":"var _jsxFileName = \"/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx\",\n  _s = $RefreshSig$();\n// InvestmentChart.tsx\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { getStockPricesInRange } from './RealStockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InvestmentChart = ({\n  startDate,\n  initialInvestment\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const stockData = getStockPricesInRange(startDate, new Date().toISOString().slice(0, 10));\n    const dates = stockData.map(data => data.date);\n    const prices = stockData.map(data => data.price);\n    const investmentValues = prices.map(price => initialInvestment / prices[0] * price);\n    setChartData({\n      labels: dates,\n      datasets: [{\n        label: 'Investment Value Over Time',\n        data: investmentValues,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        fill: true\n      }]\n    });\n  }, [startDate, initialInvestment]);\n  const options = {\n    scales: {\n      x: {\n        type: 'timeseries'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: 'white',\n      padding: '1rem'\n    },\n    children: chartData.labels && chartData.datasets ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading chart...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(InvestmentChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = InvestmentChart;\nexport default InvestmentChart;\nvar _c;\n$RefreshReg$(_c, \"InvestmentChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","getStockPricesInRange","jsxDEV","_jsxDEV","InvestmentChart","startDate","initialInvestment","_s","chartData","setChartData","stockData","Date","toISOString","slice","dates","map","data","date","prices","price","investmentValues","labels","datasets","label","borderColor","backgroundColor","fill","options","scales","x","type","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx"],"sourcesContent":["// InvestmentChart.tsx\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { getStockPricesInRange } from './RealStockData';\n\ninterface InvestmentChartProps {\n  startDate: string;\n  initialInvestment: number;\n  finalValue: number;\n}\n\nconst InvestmentChart: React.FC<InvestmentChartProps> = ({ startDate, initialInvestment }) => {\n  const [chartData, setChartData] = useState<any>({});\n\n  useEffect(() => {\n    const stockData = getStockPricesInRange(startDate, new Date().toISOString().slice(0, 10));\n    \n    const dates = stockData.map(data => data.date);\n    const prices = stockData.map(data => data.price);\n\n    const investmentValues = prices.map(price => (initialInvestment / prices[0]) * price);\n\n    setChartData({\n      labels: dates,\n      datasets: [\n        {\n          label: 'Investment Value Over Time',\n          data: investmentValues,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          fill: true,\n        },\n      ],\n    });\n  }, [startDate, initialInvestment]);\n\n  const options = {\n    scales: {\n      x: {\n        type: 'timeseries',\n      },\n    },\n  };\n\n  return (\n    <div style={{ backgroundColor: 'white', padding: '1rem' }}>\n      {chartData.labels && chartData.datasets ? (\n        <Line data={chartData} options={options} />\n      ) : (\n        <p>Loading chart...</p>\n      )}\n    </div>\n  );\n};\n\nexport default InvestmentChart;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,qBAAqB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQxD,MAAMC,eAA+C,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EAC5F,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAM,CAAC,CAAC,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAGT,qBAAqB,CAACI,SAAS,EAAE,IAAIM,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEzF,MAAMC,KAAK,GAAGJ,SAAS,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC;IAC9C,MAAMC,MAAM,GAAGR,SAAS,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACG,KAAK,CAAC;IAEhD,MAAMC,gBAAgB,GAAGF,MAAM,CAACH,GAAG,CAACI,KAAK,IAAKb,iBAAiB,GAAGY,MAAM,CAAC,CAAC,CAAC,GAAIC,KAAK,CAAC;IAErFV,YAAY,CAAC;MACXY,MAAM,EAAEP,KAAK;MACbQ,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,4BAA4B;QACnCP,IAAI,EAAEI,gBAAgB;QACtBI,WAAW,EAAE,uBAAuB;QACpCC,eAAe,EAAE,yBAAyB;QAC1CC,IAAI,EAAE;MACR,CAAC;IAEL,CAAC,CAAC;EACJ,CAAC,EAAE,CAACrB,SAAS,EAAEC,iBAAiB,CAAC,CAAC;EAElC,MAAMqB,OAAO,GAAG;IACdC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,IAAI,EAAE;MACR;IACF;EACF,CAAC;EAED,oBACE3B,OAAA;IAAK4B,KAAK,EAAE;MAAEN,eAAe,EAAE,OAAO;MAAEO,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,EACvDzB,SAAS,CAACa,MAAM,IAAIb,SAAS,CAACc,QAAQ,gBACrCnB,OAAA,CAACH,IAAI;MAACgB,IAAI,EAAER,SAAU;MAACmB,OAAO,EAAEA;IAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAE3ClC,OAAA;MAAA8B,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACvB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA1CIH,eAA+C;AAAAkC,EAAA,GAA/ClC,eAA+C;AA4CrD,eAAeA,eAAe;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}