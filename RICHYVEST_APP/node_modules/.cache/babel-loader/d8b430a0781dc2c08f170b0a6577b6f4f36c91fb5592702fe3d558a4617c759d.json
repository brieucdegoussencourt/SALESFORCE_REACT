{"ast":null,"code":"var _jsxFileName = \"/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst generateDateRange = (startDate, endDate) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const dates = [];\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n  return dates;\n};\nconst InvestmentChart = ({\n  startDate,\n  initialInvestment,\n  finalValue\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const today = new Date();\n    const formattedToday = `${today.getMonth() + 1 < 10 ? '0' : ''}${today.getMonth() + 1}/${today.getFullYear()}`;\n    const dates = generateDateRange(startDate, formattedToday);\n    const values = [];\n    const step = (finalValue - initialInvestment) / (dates.length - 1);\n    for (let i = 0; i < dates.length; i++) {\n      values.push(initialInvestment + step * i);\n    }\n    setChartData({\n      labels: dates,\n      datasets: [{\n        label: 'Investment Growth',\n        data: values,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        fill: true\n      }]\n    });\n  }, [startDate, initialInvestment, finalValue]);\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Date (MM/YYYY)'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Investment Value ($)'\n        },\n        beginAtZero: false,\n        suggestedMin: initialInvestment,\n        suggestedMax: finalValue\n      }\n    },\n    plugins: {\n      legend: {\n        display: true\n      }\n    },\n    layout: {\n      padding: {\n        left: 10,\n        right: 10,\n        top: 10,\n        bottom: 10\n      }\n    },\n    backgroundColor: 'white'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: 'white',\n      padding: '1rem'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(InvestmentChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = InvestmentChart;\nexport default InvestmentChart;\nvar _c;\n$RefreshReg$(_c, \"InvestmentChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","registerables","jsxDEV","_jsxDEV","register","generateDateRange","startDate","endDate","start","Date","end","dates","month","getMonth","year","getFullYear","push","setMonth","InvestmentChart","initialInvestment","finalValue","_s","chartData","setChartData","today","formattedToday","values","step","length","i","labels","datasets","label","data","borderColor","backgroundColor","fill","options","scales","x","title","display","text","y","beginAtZero","suggestedMin","suggestedMax","plugins","legend","layout","padding","left","right","top","bottom","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\nconst generateDateRange = (startDate: string, endDate: string) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const dates = [];\n\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n\n  return dates;\n};\n\ninterface InvestmentChartProps {\n  startDate: string;\n  initialInvestment: number;\n  finalValue: number;\n}\n\nconst InvestmentChart: React.FC<InvestmentChartProps> = ({ startDate, initialInvestment, finalValue }) => {\n  const [chartData, setChartData] = useState({});\n  \n  useEffect(() => {\n    const today = new Date();\n    const formattedToday = `${today.getMonth() + 1 < 10 ? '0' : ''}${today.getMonth() + 1}/${today.getFullYear()}`;\n    const dates = generateDateRange(startDate, formattedToday);\n    \n    const values = [];\n    const step = (finalValue - initialInvestment) / (dates.length - 1);\n    \n    for (let i = 0; i < dates.length; i++) {\n      values.push(initialInvestment + step * i);\n    }\n\n    setChartData({\n      labels: dates,\n      datasets: [\n        {\n          label: 'Investment Growth',\n          data: values,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          fill: true,\n        },\n      ],\n    });\n  }, [startDate, initialInvestment, finalValue]);\n\n  const options = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Date (MM/YYYY)',\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Investment Value ($)',\n        },\n        beginAtZero: false,\n        suggestedMin: initialInvestment,\n        suggestedMax: finalValue,\n      },\n    },\n    plugins: {\n      legend: {\n        display: true,\n      },\n    },\n    layout: {\n      padding: {\n        left: 10,\n        right: 10,\n        top: 10,\n        bottom: 10,\n      },\n    },\n    backgroundColor: 'white',\n  };\n\n  return (\n    <div style={{ backgroundColor: 'white', padding: '1rem' }}>\n      <Line data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default InvestmentChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}