{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { stockData } from './RealStockData';\n\n// Custom hook to manage the state and logic \n// for calculating stock value\n\nexport const useGuessModel = () => {\n  _s();\n  const today = new Date();\n  const todayFormatted = `${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getFullYear()}`;\n  const [amount, setAmount] = useState('100');\n  const [month, setMonth] = useState('10');\n  const [year, setYear] = useState('');\n  const [result, setResult] = useState(100);\n  console.log('Stock Data:', stockData);\n  const getStockPriceByDate = date => {\n    console.log(`Fetching stock price for date: ${date}`);\n    const data = stockData.find(d => d.date === date);\n    console.log(`Found data: ${data ? JSON.stringify(data) : 'No data found'}`);\n    return data ? data.price : null;\n  };\n  const calculateResult = (amount, date) => {\n    console.log(`Calculating result for amount: ${amount}, date: ${date}`);\n    const enteredDateValue = getStockPriceByDate(date);\n    const todayValue = getStockPriceByDate(todayFormatted);\n    console.log(`Stock price on entered date: ${enteredDateValue}, Stock price today: ${todayValue}`);\n    if (enteredDateValue === null || todayValue === null) {\n      setResult(0);\n      return;\n    }\n\n    // Calculate the result and format with two decimal places and thousand separators\n    const calculatedResult = parseFloat(amount) / enteredDateValue * todayValue;\n    console.log(`Calculated result: ${calculatedResult}`);\n    setResult(parseFloat(calculatedResult.toFixed(2))); // Limit result to 2 decimals\n  };\n  const handleAmountChange = e => {\n    const newAmount = e.target.value;\n    console.log(`Amount changed: ${newAmount}`);\n    setAmount(newAmount);\n    calculateResult(newAmount, date); // Recalculate when amount changes\n  };\n  const handleDateChange = e => {\n    const newDate = e.target.value;\n    console.log(`Date changed: ${newDate}`);\n    setDate(newDate);\n    calculateResult(amount, newDate); // Recalculate when date changes\n  };\n  return {\n    amount,\n    date,\n    result,\n    handleAmountChange,\n    handleDateChange,\n    calculateResult\n  };\n};\n_s(useGuessModel, \"zVLfJzzFLxWdFokQN+0o3Ero+xo=\");","map":{"version":3,"names":["useState","stockData","useGuessModel","_s","today","Date","todayFormatted","getMonth","toString","padStart","getFullYear","amount","setAmount","month","setMonth","year","setYear","result","setResult","console","log","getStockPriceByDate","date","data","find","d","JSON","stringify","price","calculateResult","enteredDateValue","todayValue","calculatedResult","parseFloat","toFixed","handleAmountChange","e","newAmount","target","value","handleDateChange","newDate","setDate"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/model.tsx"],"sourcesContent":["import { useState, ChangeEvent } from 'react';\nimport { stockData } from './RealStockData';\n\n// Custom hook to manage the state and logic \n// for calculating stock value\n\nexport const useGuessModel = () => {\n  const today = new Date();\n  const todayFormatted = `${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getFullYear()}`;\n  const [amount, setAmount] = useState<string>('100');\n  const [month, setMonth] = useState<string>('10');\n  const [year, setYear] = useState<string>('');\n  const [result, setResult] = useState<number>(100);\n  \n  console.log('Stock Data:', stockData);\n  \n  const getStockPriceByDate = (date: string): number | null => {\n    console.log(`Fetching stock price for date: ${date}`);\n    const data = stockData.find((d) => d.date === date);\n    console.log(`Found data: ${data ? JSON.stringify(data) : 'No data found'}`);\n    return data ? data.price : null;\n  };\n  \n  const calculateResult = (amount: string, date: string) => {\n    console.log(`Calculating result for amount: ${amount}, date: ${date}`);\n    \n    const enteredDateValue = getStockPriceByDate(date);\n    const todayValue = getStockPriceByDate(todayFormatted);\n    \n    console.log(`Stock price on entered date: ${enteredDateValue}, Stock price today: ${todayValue}`);\n    \n    if (enteredDateValue === null || todayValue === null) {\n      setResult(0);\n      return;\n    }\n    \n    // Calculate the result and format with two decimal places and thousand separators\n    const calculatedResult = (parseFloat(amount) / enteredDateValue) * todayValue;\n    console.log(`Calculated result: ${calculatedResult}`);\n    setResult(parseFloat(calculatedResult.toFixed(2))); // Limit result to 2 decimals\n  };\n  \n  const handleAmountChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newAmount = e.target.value;\n    console.log(`Amount changed: ${newAmount}`);\n    setAmount(newAmount);\n    calculateResult(newAmount, date); // Recalculate when amount changes\n  };\n  \n  const handleDateChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const newDate = e.target.value;\n    console.log(`Date changed: ${newDate}`);\n    setDate(newDate);\n    calculateResult(amount, newDate); // Recalculate when date changes\n  };\n  \n  return {\n    amount,\n    date,\n    result,\n    handleAmountChange,\n    handleDateChange,\n    calculateResult,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}