{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { stockData } from './RealStockData';\n\n// Custom hook to manage the state and logic for calculating stock investment over time\n\nexport const useGuessModel = () => {\n  _s();\n  const today = new Date();\n  const todayFormatted = `${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getFullYear()}`;\n  const [amount, setAmount] = useState('100');\n  const [date, setDate] = useState('12/2008');\n  const getStockPriceByDate = date => {\n    const data = stockData.find(d => d.date === date);\n    return data ? data.price : null;\n  };\n  const calculateResult = (amount, date) => {\n    const enteredDateValue = getStockPriceByDate(date);\n    const todayValue = getStockPriceByDate(todayFormatted);\n    if (enteredDateValue === null || todayValue === null) {\n      return 0;\n    }\n    const calculatedResult = parseFloat(amount) / enteredDateValue * todayValue;\n    return parseFloat(calculatedResult.toFixed(2));\n  };\n  const [result, setResult] = useState(() => calculateResult(amount, date));\n\n  // Recalculate when amount changes\n  const handleAmountChange = e => {\n    const newAmount = e.target.value;\n    setAmount(newAmount);\n    setResult(calculateResult(newAmount, date));\n  };\n  // Recalculate when date changes\n  const handleDateChange = e => {\n    const newDate = e.target.value;\n    setDate(newDate);\n    setResult(calculateResult(amount, newDate));\n  };\n  return {\n    amount,\n    date,\n    result,\n    handleAmountChange,\n    handleDateChange\n  };\n};\n_s(useGuessModel, \"fYxdJzSELhVGZLSn+dRjFMBpnEU=\");","map":{"version":3,"names":["useState","stockData","useGuessModel","_s","today","Date","todayFormatted","getMonth","toString","padStart","getFullYear","amount","setAmount","date","setDate","getStockPriceByDate","data","find","d","price","calculateResult","enteredDateValue","todayValue","calculatedResult","parseFloat","toFixed","result","setResult","handleAmountChange","e","newAmount","target","value","handleDateChange","newDate"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/model.ts"],"sourcesContent":["import { useState, ChangeEvent } from 'react';\nimport { stockData } from './RealStockData';\n\n// Custom hook to manage the state and logic for calculating stock investment over time\n\nexport const useGuessModel = () => {\n  const today = new Date();\n  const todayFormatted = `${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getFullYear()}`;\n  const [amount, setAmount] = useState<string>('100');\n  const [date, setDate] = useState<string>('12/2008');\n    \n  const getStockPriceByDate = (date: string): number | null => {\n    const data = stockData.find((d) => d.date === date);\n    return data ? data.price : null;\n  };\n  \n  const calculateResult = (amount: string, date: string): number => {    \n    const enteredDateValue = getStockPriceByDate(date);\n    const todayValue = getStockPriceByDate(todayFormatted);\n        \n    if (enteredDateValue === null || todayValue === null) {\n      return 0;\n    }\n    \n    const calculatedResult = (parseFloat(amount) / enteredDateValue) * todayValue;\n    return parseFloat(calculatedResult.toFixed(2));\n  };\n\n  const [result, setResult] = useState<number>(() => calculateResult(amount, date));\n  \n  // Recalculate when amount changes\n  const handleAmountChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newAmount = e.target.value;\n    setAmount(newAmount);\n    setResult(calculateResult(newAmount, date));\n  };\n  // Recalculate when date changes\n  const handleDateChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const newDate = e.target.value;\n    setDate(newDate);\n    setResult(calculateResult(amount, newDate));\n  };\n  \n  return {\n    amount,\n    date,\n    result,\n    handleAmountChange,\n    handleDateChange,\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,QAAqB,OAAO;AAC7C,SAASC,SAAS,QAAQ,iBAAiB;;AAE3C;;AAEA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,cAAc,GAAG,GAAG,CAACF,KAAK,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIL,KAAK,CAACM,WAAW,CAAC,CAAC,EAAE;EACrG,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAS,KAAK,CAAC;EACnD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAS,SAAS,CAAC;EAEnD,MAAMe,mBAAmB,GAAIF,IAAY,IAAoB;IAC3D,MAAMG,IAAI,GAAGf,SAAS,CAACgB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACL,IAAI,KAAKA,IAAI,CAAC;IACnD,OAAOG,IAAI,GAAGA,IAAI,CAACG,KAAK,GAAG,IAAI;EACjC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAACT,MAAc,EAAEE,IAAY,KAAa;IAChE,MAAMQ,gBAAgB,GAAGN,mBAAmB,CAACF,IAAI,CAAC;IAClD,MAAMS,UAAU,GAAGP,mBAAmB,CAACT,cAAc,CAAC;IAEtD,IAAIe,gBAAgB,KAAK,IAAI,IAAIC,UAAU,KAAK,IAAI,EAAE;MACpD,OAAO,CAAC;IACV;IAEA,MAAMC,gBAAgB,GAAIC,UAAU,CAACb,MAAM,CAAC,GAAGU,gBAAgB,GAAIC,UAAU;IAC7E,OAAOE,UAAU,CAACD,gBAAgB,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;EAChD,CAAC;EAED,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAS,MAAMoB,eAAe,CAACT,MAAM,EAAEE,IAAI,CAAC,CAAC;;EAEjF;EACA,MAAMe,kBAAkB,GAAIC,CAAgC,IAAK;IAC/D,MAAMC,SAAS,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAChCpB,SAAS,CAACkB,SAAS,CAAC;IACpBH,SAAS,CAACP,eAAe,CAACU,SAAS,EAAEjB,IAAI,CAAC,CAAC;EAC7C,CAAC;EACD;EACA,MAAMoB,gBAAgB,GAAIJ,CAAiC,IAAK;IAC9D,MAAMK,OAAO,GAAGL,CAAC,CAACE,MAAM,CAACC,KAAK;IAC9BlB,OAAO,CAACoB,OAAO,CAAC;IAChBP,SAAS,CAACP,eAAe,CAACT,MAAM,EAAEuB,OAAO,CAAC,CAAC;EAC7C,CAAC;EAED,OAAO;IACLvB,MAAM;IACNE,IAAI;IACJa,MAAM;IACNE,kBAAkB;IAClBK;EACF,CAAC;AACH,CAAC;AAAC9B,EAAA,CA7CWD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}