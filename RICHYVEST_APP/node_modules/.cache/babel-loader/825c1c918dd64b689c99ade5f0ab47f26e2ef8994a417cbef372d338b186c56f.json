{"ast":null,"code":"var _jsxFileName = \"/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst generateDateRange = (startDate, endDate) => {\n  const start = new Date(startDate);\n  const end = new Date();\n  const dates = [];\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n  return dates;\n};\nconst InvestmentChart = ({\n  startDate,\n  initialInvestment,\n  finalValue\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const dateRange = generateDateRange(startDate, new Date().toISOString().slice(0, 10));\n    const dataPoints = dateRange.map((date, index) => {\n      if (index === 0) return initialInvestment;\n      if (index === dateRange.length - 1) return finalValue;\n      return null; // Intermediate points can be null or interpolated\n    });\n    setChartData({\n      labels: dateRange,\n      datasets: [{\n        label: 'Investment Return',\n        data: dataPoints,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(255, 255, 255, 1)',\n        // Changed to white\n        fill: true\n      }]\n    });\n  }, [startDate, initialInvestment, finalValue]);\n  const options = {\n    scales: {\n      x: {\n        type: 'category',\n        labels: chartData.labels\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: 'white',\n      padding: '1rem'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(InvestmentChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = InvestmentChart;\nexport default InvestmentChart;\nvar _c;\n$RefreshReg$(_c, \"InvestmentChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","registerables","jsxDEV","_jsxDEV","register","generateDateRange","startDate","endDate","start","Date","end","dates","month","getMonth","year","getFullYear","push","setMonth","InvestmentChart","initialInvestment","finalValue","_s","chartData","setChartData","dateRange","toISOString","slice","dataPoints","map","date","index","length","labels","datasets","label","data","borderColor","backgroundColor","fill","options","scales","x","type","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\nconst generateDateRange = (startDate: string, endDate: string) => {\n  const start = new Date(startDate);\n  const end = new Date();\n  const dates = [];\n\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n\n  return dates;\n};\n\ninterface InvestmentChartProps {\n  startDate: string;\n  initialInvestment: number;\n  finalValue: number;\n}\n\nconst InvestmentChart: React.FC<InvestmentChartProps> = ({ startDate, initialInvestment, finalValue }) => {\n  const [chartData, setChartData] = useState<any>({});\n\n  useEffect(() => {\n    const dateRange = generateDateRange(startDate, new Date().toISOString().slice(0, 10));\n    const dataPoints = dateRange.map((date, index) => {\n      if (index === 0) return initialInvestment;\n      if (index === dateRange.length - 1) return finalValue;\n      return null; // Intermediate points can be null or interpolated\n    });\n\n    setChartData({\n      labels: dateRange,\n      datasets: [\n        {\n          label: 'Investment Return',\n          data: dataPoints,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          backgroundColor: 'rgba(255, 255, 255, 1)', // Changed to white\n          fill: true,\n        },\n      ],\n    });\n  }, [startDate, initialInvestment, finalValue]);\n\n  const options = {\n    scales: {\n      x: {\n        type: 'category',\n        labels: chartData.labels,\n      },\n    },\n  };\n\n  return (\n    <div style={{ backgroundColor: 'white', padding: '1rem' }}>\n      <Line data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default InvestmentChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}