{"ast":null,"code":"var _jsxFileName = \"/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\n// Utility function to generate date range\nconst generateDateRange = (startDate, endDate) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const dates = [];\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n  return dates;\n};\nconst InvestmentChart = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const inputDate = '01/2022'; // Example input date in MM/YYYY format\n  const todayDate = new Date();\n  const endDate = `${todayDate.getMonth() + 1 < 10 ? '0' : ''}${todayDate.getMonth() + 1}/${todayDate.getFullYear()}`;\n  useEffect(() => {\n    fetch('./performance.json').then(response => response.json()).then(data => setData(data));\n  }, []);\n  const dateRange = generateDateRange(inputDate, endDate);\n  const chartData = {\n    labels: dateRange,\n    datasets: [{\n      label: 'Investment Return',\n      data: data.map(item => item.value),\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      color: 'white',\n      fill: true\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(InvestmentChart, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = InvestmentChart;\nexport default InvestmentChart;\nvar _c;\n$RefreshReg$(_c, \"InvestmentChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","registerables","jsxDEV","_jsxDEV","register","generateDateRange","startDate","endDate","start","Date","end","dates","month","getMonth","year","getFullYear","push","setMonth","InvestmentChart","_s","data","setData","inputDate","todayDate","fetch","then","response","json","dateRange","chartData","labels","datasets","label","map","item","value","borderColor","backgroundColor","color","fill","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/InvestmentChart.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\ninterface PerformanceData {\n  date: string;\n  value: number;\n}\n\n// Utility function to generate date range\nconst generateDateRange = (startDate: string, endDate: string) => {\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const dates = [];\n\n  while (start <= end) {\n    const month = start.getMonth() + 1;\n    const year = start.getFullYear();\n    dates.push(`${month < 10 ? '0' : ''}${month}/${year}`);\n    start.setMonth(start.getMonth() + 1);\n  }\n\n  return dates;\n};\n\nconst InvestmentChart: React.FC = () => {\n  const [data, setData] = useState<PerformanceData[]>([]);\n  const inputDate = '01/2022'; // Example input date in MM/YYYY format\n  const todayDate = new Date();\n  const endDate = `${todayDate.getMonth() + 1 < 10 ? '0' : ''}${todayDate.getMonth() + 1}/${todayDate.getFullYear()}`;\n\n  useEffect(() => {\n    fetch('./performance.json')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  const dateRange = generateDateRange(inputDate, endDate);\n\n  const chartData = {\n    labels: dateRange,\n    datasets: [\n      {\n        label: 'Investment Return',\n        data: data.map(item => item.value),\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        color: 'white',\n        fill: true,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default InvestmentChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhDH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAOhC;AACA,MAAMI,iBAAiB,GAAGA,CAACC,SAAiB,EAAEC,OAAe,KAAK;EAChE,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACH,SAAS,CAAC;EACjC,MAAMI,GAAG,GAAG,IAAID,IAAI,CAACF,OAAO,CAAC;EAC7B,MAAMI,KAAK,GAAG,EAAE;EAEhB,OAAOH,KAAK,IAAIE,GAAG,EAAE;IACnB,MAAME,KAAK,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC;IAClC,MAAMC,IAAI,GAAGN,KAAK,CAACO,WAAW,CAAC,CAAC;IAChCJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGA,KAAK,IAAIE,IAAI,EAAE,CAAC;IACtDN,KAAK,CAACS,QAAQ,CAACT,KAAK,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EACtC;EAEA,OAAOF,KAAK;AACd,CAAC;AAED,MAAMO,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGvB,QAAQ,CAAoB,EAAE,CAAC;EACvD,MAAMwB,SAAS,GAAG,SAAS,CAAC,CAAC;EAC7B,MAAMC,SAAS,GAAG,IAAId,IAAI,CAAC,CAAC;EAC5B,MAAMF,OAAO,GAAG,GAAGgB,SAAS,CAACV,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGU,SAAS,CAACV,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAIU,SAAS,CAACR,WAAW,CAAC,CAAC,EAAE;EAEnHlB,SAAS,CAAC,MAAM;IACd2B,KAAK,CAAC,oBAAoB,CAAC,CACxBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACL,IAAI,IAAIC,OAAO,CAACD,IAAI,CAAC,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,SAAS,GAAGvB,iBAAiB,CAACiB,SAAS,EAAEf,OAAO,CAAC;EAEvD,MAAMsB,SAAS,GAAG;IAChBC,MAAM,EAAEF,SAAS;IACjBG,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,mBAAmB;MAC1BZ,IAAI,EAAEA,IAAI,CAACa,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC;MAClCC,WAAW,EAAE,uBAAuB;MACpCC,eAAe,EAAE,yBAAyB;MAC1CC,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;EAED,oBACEpC,OAAA;IAAAqC,QAAA,eACErC,OAAA,CAACJ,IAAI;MAACqB,IAAI,EAAES;IAAU;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAACzB,EAAA,CAjCID,eAAyB;AAAA2B,EAAA,GAAzB3B,eAAyB;AAmC/B,eAAeA,eAAe;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}