{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { stockData } from './RealStockData';\n\n// Custom hook to manage the state and logic \n// for calculating stock value\n\nexport const useGuessModel = () => {\n  _s();\n  const today = new Date().getFullYear().toString();\n  const [amount, setAmount] = useState('100');\n  const [date, setDate] = useState('2024');\n  const [result, setResult] = useState(100);\n  const getStockPriceByDate = date => {\n    const data = stockData.find(d => d.date === date);\n    return data ? data.price : null;\n  };\n  const calculateResult = async (amount, date) => {\n    if (!amount) {\n      setResult(0);\n      return;\n    }\n    const enteredDateValue = getStockPriceByDate(date);\n    const todayValue = getStockPriceByDate(today);\n    if (enteredDateValue === null || todayValue === null) {\n      setResult(0);\n      return;\n    }\n\n    // Calculate the result and format with two decimal places and thousand separators\n    const calculatedResult = parseFloat(amount) / enteredDateValue * todayValue;\n    setResult(parseFloat(calculatedResult.toFixed(2))); // Limit result to 2 decimals\n  };\n  const handleAmountChange = e => {\n    setAmount(e.target.value);\n    calculateResult(e.target.value, date); // Recalculate when amount changes\n  };\n  const handleDateChange = e => {\n    const newDate = e.target.value;\n    setDate(newDate);\n    calculateResult(amount, newDate); // Recalculate when date changes\n  };\n  return {\n    amount,\n    date,\n    result,\n    handleAmountChange,\n    handleDateChange,\n    calculateResult\n  };\n};\n_s(useGuessModel, \"9Oikp5rXCx3XSM+PYPkzXkzZ/VQ=\");","map":{"version":3,"names":["useState","stockData","useGuessModel","_s","today","Date","getFullYear","toString","amount","setAmount","date","setDate","result","setResult","getStockPriceByDate","data","find","d","price","calculateResult","enteredDateValue","todayValue","calculatedResult","parseFloat","toFixed","handleAmountChange","e","target","value","handleDateChange","newDate"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/model.tsx"],"sourcesContent":["import { useState, ChangeEvent } from 'react';\nimport { stockData } from './RealStockData';\n\n// Custom hook to manage the state and logic \n// for calculating stock value\n\nexport const useGuessModel = () => {\n  const today = new Date().getFullYear().toString();\n  const [amount, setAmount] = useState<string>('100');\n  const [date, setDate] = useState<string>('2024');\n  const [result, setResult] = useState<number>(100);\n\n  const getStockPriceByDate = (date: string): number | null => {\n    const data = stockData.find((d) => d.date === date);\n    return data ? data.price : null;\n  };\n\n  const calculateResult = async (amount: string, date: string): Promise<void> => {\n    if (!amount) {\n      setResult(0);\n      return;\n    }\n  \n    const enteredDateValue = getStockPriceByDate(date);\n    const todayValue = getStockPriceByDate(today);\n  \n    if (enteredDateValue === null || todayValue === null) {\n      setResult(0);\n      return;\n    }\n  \n    // Calculate the result and format with two decimal places and thousand separators\n    const calculatedResult = (parseFloat(amount) / enteredDateValue) * todayValue;\n    setResult(parseFloat(calculatedResult.toFixed(2))); // Limit result to 2 decimals\n  };\n\n  const handleAmountChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setAmount(e.target.value);\n    calculateResult(e.target.value, date); // Recalculate when amount changes\n  };\n\n  const handleDateChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newDate = e.target.value;\n    setDate(newDate);\n    calculateResult(amount, newDate); // Recalculate when date changes\n  };\n\n  return {\n    amount,\n    date,\n    result,\n    handleAmountChange,\n    handleDateChange,\n    calculateResult,\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,QAAqB,OAAO;AAC7C,SAASC,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACjD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAS,KAAK,CAAC;EACnD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAS,MAAM,CAAC;EAChD,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAS,GAAG,CAAC;EAEjD,MAAMc,mBAAmB,GAAIJ,IAAY,IAAoB;IAC3D,MAAMK,IAAI,GAAGd,SAAS,CAACe,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACP,IAAI,KAAKA,IAAI,CAAC;IACnD,OAAOK,IAAI,GAAGA,IAAI,CAACG,KAAK,GAAG,IAAI;EACjC,CAAC;EAED,MAAMC,eAAe,GAAG,MAAAA,CAAOX,MAAc,EAAEE,IAAY,KAAoB;IAC7E,IAAI,CAACF,MAAM,EAAE;MACXK,SAAS,CAAC,CAAC,CAAC;MACZ;IACF;IAEA,MAAMO,gBAAgB,GAAGN,mBAAmB,CAACJ,IAAI,CAAC;IAClD,MAAMW,UAAU,GAAGP,mBAAmB,CAACV,KAAK,CAAC;IAE7C,IAAIgB,gBAAgB,KAAK,IAAI,IAAIC,UAAU,KAAK,IAAI,EAAE;MACpDR,SAAS,CAAC,CAAC,CAAC;MACZ;IACF;;IAEA;IACA,MAAMS,gBAAgB,GAAIC,UAAU,CAACf,MAAM,CAAC,GAAGY,gBAAgB,GAAIC,UAAU;IAC7ER,SAAS,CAACU,UAAU,CAACD,gBAAgB,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,CAAC;EAED,MAAMC,kBAAkB,GAAIC,CAAgC,IAAK;IAC/DjB,SAAS,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IACzBT,eAAe,CAACO,CAAC,CAACC,MAAM,CAACC,KAAK,EAAElB,IAAI,CAAC,CAAC,CAAC;EACzC,CAAC;EAED,MAAMmB,gBAAgB,GAAIH,CAAgC,IAAK;IAC7D,MAAMI,OAAO,GAAGJ,CAAC,CAACC,MAAM,CAACC,KAAK;IAC9BjB,OAAO,CAACmB,OAAO,CAAC;IAChBX,eAAe,CAACX,MAAM,EAAEsB,OAAO,CAAC,CAAC,CAAC;EACpC,CAAC;EAED,OAAO;IACLtB,MAAM;IACNE,IAAI;IACJE,MAAM;IACNa,kBAAkB;IAClBI,gBAAgB;IAChBV;EACF,CAAC;AACH,CAAC;AAAChB,EAAA,CAjDWD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}