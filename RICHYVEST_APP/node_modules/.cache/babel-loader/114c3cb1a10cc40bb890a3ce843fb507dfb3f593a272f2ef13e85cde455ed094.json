{"ast":null,"code":"const performanceData = require('./performance.json');\n\n// Function to get the 10th dataset as an array of key-value pairs\nfunction getTenthDataset(data) {\n  const tenthDataset = data[\"10\"];\n  console.log('Tenth Dataset:', tenthDataset);\n  return Object.entries(tenthDataset);\n}\n\n// Export the 10th dataset\nconst RealstockData = getTenthDataset(performanceData);\n\n// Define the shape of the stock data objects\n\n// Function to format a date to \"month/year\"\nfunction formatDateToMonthYear(dateString) {\n  const date = new Date(dateString);\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based\n  const year = date.getFullYear();\n  return `${month}/${year}`;\n}\n\n// Function to generate an array of stock data objects\nconst generateStockData = () => {\n  const stockData = [];\n  for (let i = 0; i < performanceData.length; i++) {\n    const {\n      date,\n      price\n    } = performanceData[i];\n    const formattedDate = formatDateToMonthYear(date);\n    stockData.push({\n      date: formattedDate,\n      price\n    });\n  }\n  console.log('Generated Stock Data:', stockData);\n  return stockData;\n};\n\n// Export the generated data\nexport const stockData = generateStockData();","map":{"version":3,"names":["performanceData","require","getTenthDataset","data","tenthDataset","console","log","Object","entries","RealstockData","formatDateToMonthYear","dateString","date","Date","month","getMonth","toString","padStart","year","getFullYear","generateStockData","stockData","i","length","price","formattedDate","push"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/RealStockData.ts"],"sourcesContent":["const performanceData = require('./performance.json');\n\n// Function to get the 10th dataset as an array of key-value pairs\nfunction getTenthDataset(data: { [x: string]: any; }) {\n  const tenthDataset = data[\"10\"];\n  console.log('Tenth Dataset:', tenthDataset);\n  return Object.entries(tenthDataset);\n}\n\n// Export the 10th dataset\nconst RealstockData = getTenthDataset(performanceData);\n\n// Define the shape of the stock data objects\ninterface StockData {\n  date: string;\n  price: number;\n}\n\n// Function to format a date to \"month/year\"\nfunction formatDateToMonthYear(dateString: string): string {\n  const date = new Date(dateString);\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-based\n  const year = date.getFullYear();\n  return `${month}/${year}`;\n}\n\n// Function to generate an array of stock data objects\nconst generateStockData = (): StockData[] => {\n  const stockData: StockData[] = [];\n  for (let i = 0; i < performanceData.length; i++) {\n    const { date, price } = performanceData[i];\n    const formattedDate = formatDateToMonthYear(date);\n    stockData.push({ date: formattedDate, price });\n  }\n  console.log('Generated Stock Data:', stockData);\n  return stockData;\n}\n\n// Export the generated data\nexport const stockData = generateStockData();"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAoB,CAAC;;AAErD;AACA,SAASC,eAAeA,CAACC,IAA2B,EAAE;EACpD,MAAMC,YAAY,GAAGD,IAAI,CAAC,IAAI,CAAC;EAC/BE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,YAAY,CAAC;EAC3C,OAAOG,MAAM,CAACC,OAAO,CAACJ,YAAY,CAAC;AACrC;;AAEA;AACA,MAAMK,aAAa,GAAGP,eAAe,CAACF,eAAe,CAAC;;AAEtD;;AAMA;AACA,SAASU,qBAAqBA,CAACC,UAAkB,EAAU;EACzD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,MAAMG,KAAK,GAAG,CAACF,IAAI,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACjE,MAAMC,IAAI,GAAGN,IAAI,CAACO,WAAW,CAAC,CAAC;EAC/B,OAAO,GAAGL,KAAK,IAAII,IAAI,EAAE;AAC3B;;AAEA;AACA,MAAME,iBAAiB,GAAGA,CAAA,KAAmB;EAC3C,MAAMC,SAAsB,GAAG,EAAE;EACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,eAAe,CAACuB,MAAM,EAAED,CAAC,EAAE,EAAE;IAC/C,MAAM;MAAEV,IAAI;MAAEY;IAAM,CAAC,GAAGxB,eAAe,CAACsB,CAAC,CAAC;IAC1C,MAAMG,aAAa,GAAGf,qBAAqB,CAACE,IAAI,CAAC;IACjDS,SAAS,CAACK,IAAI,CAAC;MAAEd,IAAI,EAAEa,aAAa;MAAED;IAAM,CAAC,CAAC;EAChD;EACAnB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEe,SAAS,CAAC;EAC/C,OAAOA,SAAS;AAClB,CAAC;;AAED;AACA,OAAO,MAAMA,SAAS,GAAGD,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}