{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { stockData } from './RealStockData';\n\n// Custom hook to manage the state and logic \n// for calculating stock value\n\nexport const useGuessModel = () => {\n  _s();\n  const today = new Date();\n  const todayFormatted = `${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getFullYear()}`;\n  const [amount, setAmount] = useState('100');\n  const [date, setDate] = useState('10/2024');\n  const [result, setResult] = useState(100);\n  console.log('Stock Data:', stockData);\n  const getStockPriceByDate = date => {\n    console.log(`Fetching stock price for date: ${date}`);\n    const data = stockData.find(d => d.date === date);\n    console.log(`Found data: ${data ? JSON.stringify(data) : 'No data found'}`);\n    return data ? data.price : null;\n  };\n  const calculateResult = (amount, date) => {\n    const enteredDateValue = getStockPriceByDate(date);\n    const todayValue = getStockPriceByDate(todayFormatted);\n    if (enteredDateValue === null || todayValue === null) {\n      setResult(0);\n      return;\n    }\n\n    // Calculate the result and format with two decimal places and thousand separators\n    const calculatedResult = parseFloat(amount) / enteredDateValue * todayValue;\n    console.log(`Calculated result: ${calculatedResult}`);\n    setResult(parseFloat(calculatedResult.toFixed(2))); // Limit result to 2 decimals\n  };\n  const handleAmountChange = e => {\n    const newAmount = e.target.value;\n    console.log(`Amount changed: ${newAmount}`);\n    setAmount(newAmount);\n    calculateResult(newAmount, date); // Recalculate when amount changes\n  };\n  const handleDateChange = e => {\n    const newDate = e.target.value;\n    console.log(`Date changed: ${newDate}`);\n    setDate(newDate);\n    calculateResult(amount, newDate); // Recalculate when date changes\n  };\n  return {\n    amount,\n    date,\n    result,\n    handleAmountChange,\n    handleDateChange,\n    calculateResult\n  };\n};\n_s(useGuessModel, \"BJM1X9+ljtaf2W/uKXAXy7ktRX4=\");","map":{"version":3,"names":["useState","stockData","useGuessModel","_s","today","Date","todayFormatted","getMonth","toString","padStart","getFullYear","amount","setAmount","date","setDate","result","setResult","console","log","getStockPriceByDate","data","find","d","JSON","stringify","price","calculateResult","enteredDateValue","todayValue","calculatedResult","parseFloat","toFixed","handleAmountChange","e","newAmount","target","value","handleDateChange","newDate"],"sources":["/Users/brieuc/Documents/GitHub/SALESFORCE_REACT/RICHYVEST_APP/src/models/model.tsx"],"sourcesContent":["import { useState, ChangeEvent } from 'react';\nimport { stockData } from './RealStockData';\n\n// Custom hook to manage the state and logic \n// for calculating stock value\n\nexport const useGuessModel = () => {\n  const today = new Date();\n  const todayFormatted = `${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getFullYear()}`;\n  const [amount, setAmount] = useState<string>('100');\n  const [date, setDate] = useState<string>('10/2024');\n  const [result, setResult] = useState<number>(100);\n  \n  console.log('Stock Data:', stockData);\n  \n  const getStockPriceByDate = (date: string): number | null => {\n    console.log(`Fetching stock price for date: ${date}`);\n    const data = stockData.find((d) => d.date === date);\n    console.log(`Found data: ${data ? JSON.stringify(data) : 'No data found'}`);\n    return data ? data.price : null;\n  };\n  \n  const calculateResult = (amount: string, date: string) => {    \n    const enteredDateValue = getStockPriceByDate(date);\n    const todayValue = getStockPriceByDate(todayFormatted);\n        \n    if (enteredDateValue === null || todayValue === null) {\n      setResult(0);\n      return;\n    }\n    \n    // Calculate the result and format with two decimal places and thousand separators\n    const calculatedResult = (parseFloat(amount) / enteredDateValue) * todayValue;\n    console.log(`Calculated result: ${calculatedResult}`);\n    setResult(parseFloat(calculatedResult.toFixed(2))); // Limit result to 2 decimals\n  };\n  \n  const handleAmountChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newAmount = e.target.value;\n    console.log(`Amount changed: ${newAmount}`);\n    setAmount(newAmount);\n    calculateResult(newAmount, date); // Recalculate when amount changes\n  };\n  \n  const handleDateChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const newDate = e.target.value;\n    console.log(`Date changed: ${newDate}`);\n    setDate(newDate);\n    calculateResult(amount, newDate); // Recalculate when date changes\n  };\n  \n  return {\n    amount,\n    date,\n    result,\n    handleAmountChange,\n    handleDateChange,\n    calculateResult,\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,QAAqB,OAAO;AAC7C,SAASC,SAAS,QAAQ,iBAAiB;;AAE3C;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,cAAc,GAAG,GAAG,CAACF,KAAK,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIL,KAAK,CAACM,WAAW,CAAC,CAAC,EAAE;EACrG,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAS,KAAK,CAAC;EACnD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAS,SAAS,CAAC;EACnD,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAS,GAAG,CAAC;EAEjDiB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEjB,SAAS,CAAC;EAErC,MAAMkB,mBAAmB,GAAIN,IAAY,IAAoB;IAC3DI,OAAO,CAACC,GAAG,CAAC,kCAAkCL,IAAI,EAAE,CAAC;IACrD,MAAMO,IAAI,GAAGnB,SAAS,CAACoB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACT,IAAI,KAAKA,IAAI,CAAC;IACnDI,OAAO,CAACC,GAAG,CAAC,eAAeE,IAAI,GAAGG,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,GAAG,eAAe,EAAE,CAAC;IAC3E,OAAOA,IAAI,GAAGA,IAAI,CAACK,KAAK,GAAG,IAAI;EACjC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAACf,MAAc,EAAEE,IAAY,KAAK;IACxD,MAAMc,gBAAgB,GAAGR,mBAAmB,CAACN,IAAI,CAAC;IAClD,MAAMe,UAAU,GAAGT,mBAAmB,CAACb,cAAc,CAAC;IAEtD,IAAIqB,gBAAgB,KAAK,IAAI,IAAIC,UAAU,KAAK,IAAI,EAAE;MACpDZ,SAAS,CAAC,CAAC,CAAC;MACZ;IACF;;IAEA;IACA,MAAMa,gBAAgB,GAAIC,UAAU,CAACnB,MAAM,CAAC,GAAGgB,gBAAgB,GAAIC,UAAU;IAC7EX,OAAO,CAACC,GAAG,CAAC,sBAAsBW,gBAAgB,EAAE,CAAC;IACrDb,SAAS,CAACc,UAAU,CAACD,gBAAgB,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,CAAC;EAED,MAAMC,kBAAkB,GAAIC,CAAgC,IAAK;IAC/D,MAAMC,SAAS,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAChCnB,OAAO,CAACC,GAAG,CAAC,mBAAmBgB,SAAS,EAAE,CAAC;IAC3CtB,SAAS,CAACsB,SAAS,CAAC;IACpBR,eAAe,CAACQ,SAAS,EAAErB,IAAI,CAAC,CAAC,CAAC;EACpC,CAAC;EAED,MAAMwB,gBAAgB,GAAIJ,CAAiC,IAAK;IAC9D,MAAMK,OAAO,GAAGL,CAAC,CAACE,MAAM,CAACC,KAAK;IAC9BnB,OAAO,CAACC,GAAG,CAAC,iBAAiBoB,OAAO,EAAE,CAAC;IACvCxB,OAAO,CAACwB,OAAO,CAAC;IAChBZ,eAAe,CAACf,MAAM,EAAE2B,OAAO,CAAC,CAAC,CAAC;EACpC,CAAC;EAED,OAAO;IACL3B,MAAM;IACNE,IAAI;IACJE,MAAM;IACNiB,kBAAkB;IAClBK,gBAAgB;IAChBX;EACF,CAAC;AACH,CAAC;AAACvB,EAAA,CArDWD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}