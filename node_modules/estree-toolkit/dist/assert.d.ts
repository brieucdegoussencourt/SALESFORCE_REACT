import { NodeT, NodeTypes } from './helpers';
import { AliasMap } from './aliases';
/**
 * A function, when called a value and it validates the value
 * @returns `null` if the value is valid or `string` of an error message
 * if the value is not valid
 */
export type ValidateFn<T> = (value: T) => string | null;
export declare const runValidation: (validateFn: ValidateFn<any>, value: any) => void;
export declare const chain: <T>(...validateFns: ValidateFn<T>[]) => ValidateFn<T>;
export declare const OR: {
    <T1, T2>(...fns: [ValidateFn<T1>, ValidateFn<T2>]): ValidateFn<T1 | T2>;
    <T1, T2, T3>(...fns: [ValidateFn<T1>, ValidateFn<T2>, ValidateFn<T3>]): ValidateFn<T1 | T2 | T3>;
    <T1, T2, T3, T4>(...fns: [ValidateFn<T1>, ValidateFn<T2>, ValidateFn<T3>, ValidateFn<T4>]): ValidateFn<T1 | T2 | T3 | T4>;
};
export declare const meaningfulType: (value: any) => "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "null" | "array";
type ValueTypeMap = {
    string: string;
    number: number;
    bigint: bigint;
    boolean: boolean;
    null: null;
};
type ValueType = keyof ValueTypeMap;
export declare const value: <T extends [ValueType, ...ValueType[]]>(...types: T) => ValidateFn<ValueTypeMap[T[number]]>;
export declare const isReserved: (name: string) => boolean;
export declare const validIdentifier: (jsx: boolean) => ValidateFn<string>;
export declare const nonNull: ValidateFn<any>;
export declare const node: <T extends [NodeTypes, ...NodeTypes[]]>(...types: T) => ValidateFn<NodeT<T[number]>>;
export declare const nodeAlias: <T extends keyof AliasMap>(alias: T) => ValidateFn<AliasMap[T]>;
export declare const any: ValidateFn<any>;
export declare const arrayOf: <T>(validateFn: ValidateFn<T>) => ValidateFn<T[]>;
export declare const oneOf: <T extends readonly unknown[]>(items: T) => ValidateFn<T[number]>;
export declare const nullable: <T>(validateFn: ValidateFn<T>) => ValidateFn<T | null>;
export {};
