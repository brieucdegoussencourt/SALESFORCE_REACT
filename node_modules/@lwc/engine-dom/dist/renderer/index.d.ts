declare function cloneNode(node: Node, deep: boolean): Node;
declare function createElement(tagName: string, namespace?: string): Element;
declare function createText(content: string): Node;
declare function createComment(content: string): Node;
declare function createFragment(html: string): Node | null;
declare function insert(node: Node, parent: Node, anchor: Node): void;
declare function remove(node: Node, parent: Node): void;
declare function nextSibling(node: Node): Node | null;
declare function previousSibling(node: Node): Node | null;
declare function getParentNode(node: Node): Node | null;
declare function attachShadow(element: Element, options: ShadowRootInit): ShadowRoot;
declare function setText(node: Node, content: string): void;
declare function getProperty(node: Node, key: string): any;
declare function setProperty(node: Node, key: string, value: any): void;
declare function getAttribute(element: Element, name: string, namespace?: string | null): string | null;
declare function setAttribute(element: Element, name: string, value: string, namespace?: string | null): void;
declare function removeAttribute(element: Element, name: string, namespace?: string | null): void;
declare function addEventListener(target: Node, type: string, callback: EventListener, options?: AddEventListenerOptions | boolean): void;
declare function removeEventListener(target: Node, type: string, callback: EventListener, options?: EventListenerOptions | boolean): void;
declare function dispatchEvent(target: Node, event: Event): boolean;
declare function getClassList(element: Element): DOMTokenList;
declare function setCSSStyleProperty(element: Element, name: string, value: string, important: boolean): void;
declare function getBoundingClientRect(element: Element): DOMRect;
declare function querySelector(element: Element, selectors: string): Element | null;
declare function querySelectorAll(element: Element, selectors: string): NodeList;
declare function getElementsByTagName(element: Element, tagNameOrWildCard: string): HTMLCollection;
declare function getElementsByClassName(element: Element, names: string): HTMLCollection;
declare function getChildren(element: Element): HTMLCollection;
declare function getChildNodes(element: Element): NodeList;
declare function getFirstChild(element: Element): Node | null;
declare function getFirstElementChild(element: Element): Element | null;
declare function getLastChild(element: Element): Node | null;
declare function getLastElementChild(element: Element): Element | null;
declare function isConnected(node: Node): boolean;
declare function assertInstanceOfHTMLElement(elm: any, msg: string): void;
declare function ownerDocument(element: Element): Document;
declare function getTagName(elm: Element): string;
declare function attachInternals(elm: HTMLElement): ElementInternals;
export { registerContextConsumer, registerContextProvider } from './context';
export { insert, remove, cloneNode, createFragment, createElement, createText, createComment, nextSibling, previousSibling, attachShadow, getProperty, setProperty, setText, getAttribute, setAttribute, removeAttribute, addEventListener, removeEventListener, dispatchEvent, getClassList, setCSSStyleProperty, getBoundingClientRect, querySelector, querySelectorAll, getElementsByTagName, getElementsByClassName, getChildren, getChildNodes, getFirstChild, getFirstElementChild, getLastChild, getLastElementChild, getTagName, isConnected, assertInstanceOfHTMLElement, ownerDocument, attachInternals, getParentNode, };
