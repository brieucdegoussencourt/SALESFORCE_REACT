import { Node, types, Visitor } from '@babel/core';
import { NodePath } from '@babel/traverse';
import { DECORATOR_TYPES } from '../constants';
import { BabelAPI, LwcBabelPluginPass } from '../types';
import { ImportSpecifier, LwcDecoratorName } from './types';
export type DecoratorType = (typeof DECORATOR_TYPES)[keyof typeof DECORATOR_TYPES];
export interface DecoratorMeta {
    name: LwcDecoratorName;
    propertyName: string;
    path: NodePath<types.Decorator>;
    decoratedNodeType: DecoratorType;
    type?: DecoratorType;
}
declare function validateImportedLwcDecoratorUsage(engineImportSpecifiers: ImportSpecifier[], state: LwcBabelPluginPass): void;
/**
 * Remove import specifiers. It also removes the import statement if the specifier list becomes empty
 * @param engineImportSpecifiers
 */
declare function removeImportedDecoratorSpecifiers(engineImportSpecifiers: {
    name: any;
    path: NodePath<Node>;
}[]): void;
declare function decorators({ types: t }: BabelAPI): Visitor<LwcBabelPluginPass>;
export { decorators, removeImportedDecoratorSpecifiers, validateImportedLwcDecoratorUsage };
