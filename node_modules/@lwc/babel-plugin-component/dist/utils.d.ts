import { types } from '@babel/core';
import { NodePath } from '@babel/traverse';
import { CompilerMetrics } from '@lwc/errors';
import { DecoratorErrorOptions, ImportSpecifier } from './decorators/types';
import { LwcBabelPluginPass } from './types';
declare function isClassMethod(classMethod: NodePath<types.Node>, properties?: {
    kind?: string;
    name?: string;
    static?: boolean;
}): classMethod is NodePath<types.ClassMethod>;
declare function isGetterClassMethod(classMethod: NodePath<types.Node>, properties?: {
    kind?: string;
    name?: string;
    static?: boolean;
}): boolean;
declare function isSetterClassMethod(classMethod: NodePath<types.Node>, properties?: {
    kind?: string;
    name?: string;
    static?: boolean;
}): boolean;
declare function getEngineImportSpecifiers(path: NodePath): ImportSpecifier[];
declare function generateError(source: NodePath<types.Node>, { errorInfo, messageArgs }: DecoratorErrorOptions, state: LwcBabelPluginPass): Error;
declare function incrementMetricCounter(metric: CompilerMetrics, state: LwcBabelPluginPass): void;
export { isClassMethod, isGetterClassMethod, isSetterClassMethod, generateError, getEngineImportSpecifiers, incrementMetricCounter, };
