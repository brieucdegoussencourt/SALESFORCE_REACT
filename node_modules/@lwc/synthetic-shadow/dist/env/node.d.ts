declare const _Node: {
    new (): Node;
    prototype: Node;
    readonly ELEMENT_NODE: 1;
    readonly ATTRIBUTE_NODE: 2;
    readonly TEXT_NODE: 3;
    readonly CDATA_SECTION_NODE: 4;
    readonly ENTITY_REFERENCE_NODE: 5;
    readonly ENTITY_NODE: 6;
    readonly PROCESSING_INSTRUCTION_NODE: 7;
    readonly COMMENT_NODE: 8;
    readonly DOCUMENT_NODE: 9;
    readonly DOCUMENT_TYPE_NODE: 10;
    readonly DOCUMENT_FRAGMENT_NODE: 11;
    readonly NOTATION_NODE: 12;
    readonly DOCUMENT_POSITION_DISCONNECTED: 1;
    readonly DOCUMENT_POSITION_PRECEDING: 2;
    readonly DOCUMENT_POSITION_FOLLOWING: 4;
    readonly DOCUMENT_POSITION_CONTAINS: 8;
    readonly DOCUMENT_POSITION_CONTAINED_BY: 16;
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;
};
declare const DOCUMENT_POSITION_CONTAINED_BY: 16, DOCUMENT_POSITION_CONTAINS: 8, DOCUMENT_POSITION_PRECEDING: 2, DOCUMENT_POSITION_FOLLOWING: 4, ELEMENT_NODE: 1, TEXT_NODE: 3, CDATA_SECTION_NODE: 4, PROCESSING_INSTRUCTION_NODE: 7, COMMENT_NODE: 8, DOCUMENT_FRAGMENT_NODE: 11;
declare const appendChild: <T extends Node>(node: T) => T, cloneNode: (deep?: boolean | undefined) => Node, compareDocumentPosition: (other: Node) => number, insertBefore: <T extends Node>(node: T, child: Node | null) => T, removeChild: <T extends Node>(child: T) => T, replaceChild: <T extends Node>(node: Node, child: T) => T, hasChildNodes: () => boolean;
declare const contains: (other: Node | null) => boolean;
declare const firstChildGetter: (this: Node) => ChildNode | null;
declare const lastChildGetter: (this: Node) => ChildNode | null;
declare const textContentGetter: (this: Node) => string;
declare const parentNodeGetter: (this: Node) => (Node & ParentNode) | null;
declare const ownerDocumentGetter: (this: Node) => Document | null;
declare const parentElementGetter: (this: Node) => Element | null;
declare const textContextSetter: (this: Node, s: string) => void;
declare const childNodesGetter: (this: Node) => NodeListOf<Node & Element>;
declare const nextSiblingGetter: (this: Node) => ChildNode | null;
declare const isConnected: () => any;
export { _Node as Node, appendChild, childNodesGetter, cloneNode, compareDocumentPosition, insertBefore, isConnected, parentElementGetter, parentNodeGetter, removeChild, replaceChild, textContextSetter, ownerDocumentGetter, hasChildNodes, contains, firstChildGetter, lastChildGetter, textContentGetter, nextSiblingGetter, DOCUMENT_POSITION_CONTAINS, DOCUMENT_POSITION_CONTAINED_BY, DOCUMENT_POSITION_PRECEDING, DOCUMENT_POSITION_FOLLOWING, ELEMENT_NODE, TEXT_NODE, CDATA_SECTION_NODE, PROCESSING_INSTRUCTION_NODE, COMMENT_NODE, DOCUMENT_FRAGMENT_NODE, };
