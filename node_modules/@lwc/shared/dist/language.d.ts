declare const 
/** Detached {@linkcode Object.assign}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign MDN Reference}. */
assign: {
    <T extends {}, U>(target: T, source: U): T & U;
    <T_1 extends {}, U_1, V>(target: T_1, source1: U_1, source2: V): T_1 & U_1 & V;
    <T_2 extends {}, U_2, V_1, W>(target: T_2, source1: U_2, source2: V_1, source3: W): T_2 & U_2 & V_1 & W;
    (target: object, ...sources: any[]): any;
}, 
/** Detached {@linkcode Object.create}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create MDN Reference}. */
create: {
    (o: object | null): any;
    (o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;
}, 
/** Detached {@linkcode Object.defineProperties}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties MDN Reference}. */
defineProperties: <T>(o: T, properties: PropertyDescriptorMap & ThisType<any>) => T, 
/** Detached {@linkcode Object.defineProperty}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty MDN Reference}. */
defineProperty: <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T, 
/** Detached {@linkcode Object.entries}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries MDN Reference}. */
entries: {
    <T>(o: {
        [s: string]: T;
    } | ArrayLike<T>): [string, T][];
    (o: {}): [string, any][];
}, 
/** Detached {@linkcode Object.freeze}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze MDN Reference}. */
freeze: {
    <T extends Function>(f: T): T;
    <T_1 extends {
        [idx: string]: object | U | null | undefined;
    }, U extends string | number | bigint | boolean | symbol>(o: T_1): Readonly<T_1>;
    <T_2>(o: T_2): Readonly<T_2>;
}, 
/** Detached {@linkcode Object.getOwnPropertyDescriptor}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor MDN Reference}. */
getOwnPropertyDescriptor: (o: any, p: PropertyKey) => PropertyDescriptor | undefined, 
/** Detached {@linkcode Object.getOwnPropertyDescriptors}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors MDN Reference}. */
getOwnPropertyDescriptors: <T>(o: T) => { [P in keyof T]: TypedPropertyDescriptor<T[P]>; } & {
    [x: string]: PropertyDescriptor;
}, 
/** Detached {@linkcode Object.getOwnPropertyNames}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames MDN Reference}. */
getOwnPropertyNames: (o: any) => string[], 
/** Detached {@linkcode Object.getPrototypeOf}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf MDN Reference}. */
getPrototypeOf: (o: any) => any, 
/** Detached {@linkcode Object.hasOwnProperty}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty MDN Reference}. */
hasOwnProperty: (v: PropertyKey) => boolean, 
/** Detached {@linkcode Object.isFrozen}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen MDN Reference}. */
isFrozen: (o: any) => boolean, 
/** Detached {@linkcode Object.keys}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys MDN Reference}. */
keys: {
    (o: object): string[];
    (o: {}): string[];
}, 
/** Detached {@linkcode Object.seal}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal MDN Reference}. */
seal: <T>(o: T) => T, 
/** Detached {@linkcode Object.setPrototypeOf}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf MDN Reference}. */
setPrototypeOf: (o: any, proto: object | null) => any;
/** Detached {@linkcode Array.isArray}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray MDN Reference}. */
declare const isArray: (arg: any) => arg is any[];
/** The most extensible array type. */
type BaseArray = readonly unknown[];
declare const ArrayConcat: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["concat"]>) => ReturnType<T["concat"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["concat"]>) => ReturnType<T_1["concat"]>;
}, ArrayCopyWithin: {
    call: <T extends unknown[]>(thisArg: T, ...args: Parameters<T["copyWithin"]>) => ReturnType<T["copyWithin"]>;
    apply: <T_1 extends unknown[]>(thisArg: T_1, args: Parameters<T_1["copyWithin"]>) => ReturnType<T_1["copyWithin"]>;
}, ArrayEvery: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["every"]>) => ReturnType<T["every"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["every"]>) => ReturnType<T_1["every"]>;
}, ArrayFill: {
    call: <T extends unknown[]>(thisArg: T, ...args: Parameters<T["fill"]>) => ReturnType<T["fill"]>;
    apply: <T_1 extends unknown[]>(thisArg: T_1, args: Parameters<T_1["fill"]>) => ReturnType<T_1["fill"]>;
}, ArrayFilter: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["filter"]>) => ReturnType<T["filter"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["filter"]>) => ReturnType<T_1["filter"]>;
}, ArrayFind: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["find"]>) => ReturnType<T["find"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["find"]>) => ReturnType<T_1["find"]>;
}, ArrayFindIndex: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["findIndex"]>) => ReturnType<T["findIndex"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["findIndex"]>) => ReturnType<T_1["findIndex"]>;
}, ArrayIncludes: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["includes"]>) => ReturnType<T["includes"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["includes"]>) => ReturnType<T_1["includes"]>;
}, ArrayIndexOf: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["indexOf"]>) => ReturnType<T["indexOf"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["indexOf"]>) => ReturnType<T_1["indexOf"]>;
}, ArrayJoin: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["join"]>) => ReturnType<T["join"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["join"]>) => ReturnType<T_1["join"]>;
}, ArrayMap: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["map"]>) => ReturnType<T["map"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["map"]>) => ReturnType<T_1["map"]>;
}, ArrayPop: {
    call: <T extends unknown[]>(thisArg: T, ...args: Parameters<T["pop"]>) => ReturnType<T["pop"]>;
    apply: <T_1 extends unknown[]>(thisArg: T_1, args: Parameters<T_1["pop"]>) => ReturnType<T_1["pop"]>;
}, ArrayPush: {
    call: <T extends unknown[]>(thisArg: T, ...args: Parameters<T["push"]>) => ReturnType<T["push"]>;
    apply: <T_1 extends unknown[]>(thisArg: T_1, args: Parameters<T_1["push"]>) => ReturnType<T_1["push"]>;
}, ArrayReduce: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["reduce"]>) => ReturnType<T["reduce"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["reduce"]>) => ReturnType<T_1["reduce"]>;
}, ArrayReverse: {
    call: <T extends unknown[]>(thisArg: T, ...args: Parameters<T["reverse"]>) => ReturnType<T["reverse"]>;
    apply: <T_1 extends unknown[]>(thisArg: T_1, args: Parameters<T_1["reverse"]>) => ReturnType<T_1["reverse"]>;
}, ArrayShift: {
    call: <T extends unknown[]>(thisArg: T, ...args: Parameters<T["shift"]>) => ReturnType<T["shift"]>;
    apply: <T_1 extends unknown[]>(thisArg: T_1, args: Parameters<T_1["shift"]>) => ReturnType<T_1["shift"]>;
}, ArraySlice: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["slice"]>) => ReturnType<T["slice"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["slice"]>) => ReturnType<T_1["slice"]>;
}, ArraySome: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["some"]>) => ReturnType<T["some"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["some"]>) => ReturnType<T_1["some"]>;
}, ArraySort: {
    call: <T extends unknown[]>(thisArg: T, ...args: Parameters<T["sort"]>) => ReturnType<T["sort"]>;
    apply: <T_1 extends unknown[]>(thisArg: T_1, args: Parameters<T_1["sort"]>) => ReturnType<T_1["sort"]>;
}, ArraySplice: {
    call: <T extends unknown[]>(thisArg: T, ...args: Parameters<T["splice"]>) => ReturnType<T["splice"]>;
    apply: <T_1 extends unknown[]>(thisArg: T_1, args: Parameters<T_1["splice"]>) => ReturnType<T_1["splice"]>;
}, ArrayUnshift: {
    call: <T extends unknown[]>(thisArg: T, ...args: Parameters<T["unshift"]>) => ReturnType<T["unshift"]>;
    apply: <T_1 extends unknown[]>(thisArg: T_1, args: Parameters<T_1["unshift"]>) => ReturnType<T_1["unshift"]>;
}, forEach: {
    call: <T extends BaseArray>(thisArg: T, ...args: Parameters<T["forEach"]>) => ReturnType<T["forEach"]>;
    apply: <T_1 extends BaseArray>(thisArg: T_1, args: Parameters<T_1["forEach"]>) => ReturnType<T_1["forEach"]>;
};
/**
 * Wrapper for {@linkcode Array.prototype.every} that correctly preserves the type predicate in the
 * return value; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every MDN Reference}.
 * @param arr Array to test.
 * @param predicate A function to execute for each element of the array.
 * @returns Whether all elements in the array pass the test provided by the predicate.
 */
declare function arrayEvery<S extends T, T = unknown>(arr: readonly T[], predicate: (value: any, index: number, array: readonly T[]) => value is S): arr is readonly S[];
/** Detached {@linkcode String.fromCharCode}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode MDN Reference}. */
declare const StringFromCharCode: (...codes: number[]) => string;
declare const StringCharAt: (pos: number) => string, StringCharCodeAt: (index: number) => number, StringReplace: {
    (searchValue: string | RegExp, replaceValue: string): string;
    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
    (searchValue: {
        [Symbol.replace](string: string, replaceValue: string): string;
    }, replaceValue: string): string;
    (searchValue: {
        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
    }, replacer: (substring: string, ...args: any[]) => string): string;
}, StringSplit: {
    (separator: string | RegExp, limit?: number | undefined): string[];
    (splitter: {
        [Symbol.split](string: string, limit?: number | undefined): string[];
    }, limit?: number | undefined): string[];
}, StringSlice: (start?: number | undefined, end?: number | undefined) => string, StringToLowerCase: () => string;
export { 
/** Detached {@linkcode Array.isArray}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray MDN Reference}. */
isArray, 
/** Unbound {@linkcode Array.prototype.concat}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat MDN Reference}. */
ArrayConcat, 
/** Unbound {@linkcode Array.prototype.copyWithin}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin MDN Reference}. */
ArrayCopyWithin, 
/** Unbound {@linkcode Array.prototype.every}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every MDN Reference}. */
ArrayEvery, 
/** Unbound {@linkcode Array.prototype.fill}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill MDN Reference}. */
ArrayFill, 
/** Unbound {@linkcode Array.prototype.filter}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter MDN Reference}. */
ArrayFilter, 
/** Unbound {@linkcode Array.prototype.find}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find MDN Reference}. */
ArrayFind, 
/** Unbound {@linkcode Array.prototype.findIndex}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex MDN Reference}. */
ArrayFindIndex, 
/** Unbound {@linkcode Array.prototype.includes}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes MDN Reference}. */
ArrayIncludes, 
/** Unbound {@linkcode Array.prototype.indexOf}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf MDN Reference}. */
ArrayIndexOf, 
/** Unbound {@linkcode Array.prototype.join}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join MDN Reference}. */
ArrayJoin, 
/** Unbound {@linkcode Array.prototype.map}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map MDN Reference}. */
ArrayMap, 
/** Unbound {@linkcode Array.prototype.pop}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop MDN Reference}. */
ArrayPop, 
/** Unbound {@linkcode Array.prototype.push}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push MDN Reference}. */
ArrayPush, 
/** Unbound {@linkcode Array.prototype.reduce}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce MDN Reference}. */
ArrayReduce, 
/** Unbound {@linkcode Array.prototype.reverse}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse MDN Reference}. */
ArrayReverse, 
/** Unbound {@linkcode Array.prototype.shift}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift MDN Reference}. */
ArrayShift, 
/** Unbound {@linkcode Array.prototype.slice}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice MDN Reference}. */
ArraySlice, 
/** Unbound {@linkcode Array.prototype.some}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some MDN Reference}. */
ArraySome, 
/** Unbound {@linkcode Array.prototype.sort}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort MDN Reference}. */
ArraySort, 
/** Unbound {@linkcode Array.prototype.splice}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice MDN Reference}. */
ArraySplice, 
/** Unbound {@linkcode Array.prototype.unshift}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift MDN Reference}. */
ArrayUnshift, 
/** Unbound {@linkcode Array.prototype.forEach}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach MDN Reference}. */
forEach, // Doesn't follow convention!
arrayEvery, // Not actually Array#every!
assign, create, defineProperties, defineProperty, entries, freeze, getOwnPropertyDescriptor, getOwnPropertyDescriptors, getOwnPropertyNames, getPrototypeOf, hasOwnProperty, isFrozen, keys, seal, setPrototypeOf, StringFromCharCode, 
/** Unbound {@linkcode String.prototype.charAt}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt MDN Reference}. */
StringCharAt, 
/** Unbound {@linkcode String.prototype.charCodeAt}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt MDN Reference}. */
StringCharCodeAt, 
/** Unbound {@linkcode String.prototype.replace}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace MDN Reference}. */
StringReplace, 
/** Unbound {@linkcode String.prototype.split}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split MDN Reference}. */
StringSplit, 
/** Unbound {@linkcode String.prototype.slice}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice MDN Reference}. */
StringSlice, 
/** Unbound {@linkcode String.prototype.toLowerCase}; see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase MDN Reference}. */
StringToLowerCase, };
/**
 * Determines whether the argument is `undefined`.
 * @param obj Value to test
 * @returns `true` if the value is `undefined`.
 */
export declare function isUndefined(obj: unknown): obj is undefined;
/**
 * Determines whether the argument is `null`.
 * @param obj Value to test
 * @returns `true` if the value is `null`.
 */
export declare function isNull(obj: unknown): obj is null;
/**
 * Determines whether the argument is `true`.
 * @param obj Value to test
 * @returns `true` if the value is `true`.
 */
export declare function isTrue(obj: unknown): obj is true;
/**
 * Determines whether the argument is `false`.
 * @param obj Value to test
 * @returns `true` if the value is `false`.
 */
export declare function isFalse(obj: unknown): obj is false;
/**
 * Determines whether the argument is a boolean.
 * @param obj Value to test
 * @returns `true` if the value is a boolean.
 */
export declare function isBoolean(obj: unknown): obj is boolean;
/**
 * Determines whether the argument is a function.
 * @param obj Value to test
 * @returns `true` if the value is a function.
 */
export declare function isFunction(obj: unknown): obj is Function;
/**
 * Determines whether the argument is an object or null.
 * @param obj Value to test
 * @returns `true` if the value is an object or null.
 */
export declare function isObject(obj: unknown): obj is object | null;
/**
 * Determines whether the argument is a string.
 * @param obj Value to test
 * @returns `true` if the value is a string.
 */
export declare function isString(obj: unknown): obj is string;
/**
 * Determines whether the argument is a number.
 * @param obj Value to test
 * @returns `true` if the value is a number.
 */
export declare function isNumber(obj: unknown): obj is number;
/** Does nothing! 🚀 */
export declare function noop(): void;
/**
 * Converts the argument to a string, safely accounting for objects with "null" prototype.
 * Note that `toString(null)` returns `"[object Null]"` rather than `"null"`.
 * @param obj Value to convert to a string.
 * @returns String representation of the value.
 */
export declare function toString(obj: unknown): string;
/**
 * Gets the property descriptor for the given object and property key. Similar to
 * {@linkcode Object.getOwnPropertyDescriptor}, but looks up the prototype chain.
 * @param o Value to get the property descriptor for
 * @param p Property key to get the descriptor for
 * @returns The property descriptor for the given object and property key.
 */
export declare function getPropertyDescriptor(o: unknown, p: PropertyKey): PropertyDescriptor | undefined;
