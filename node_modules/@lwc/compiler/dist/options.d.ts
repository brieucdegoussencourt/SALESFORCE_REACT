import { InstrumentationObject } from '@lwc/errors';
import { CustomRendererConfig } from '@lwc/template-compiler';
type RecursiveRequired<T> = {
    [P in keyof T]-?: RecursiveRequired<T[P]>;
};
export type CustomPropertiesResolution = {
    type: 'native';
} | {
    type: 'module';
    name: string;
};
/**
 * @deprecated Custom property transforms are deprecated because IE11 and other legacy browsers are no longer supported.
 */
export interface StylesheetConfig {
    customProperties?: {
        resolution?: CustomPropertiesResolution;
    };
}
export interface OutputConfig {
    /**
     * If `true` a source map is generated for the transformed file.
     * If `inline`, an inline source map is generated and appended to the end of the transformed file.
     * @default false
     */
    sourcemap?: boolean | 'inline';
    /**
     * @deprecated The minify property has no effect on the generated output.
     */
    minify?: boolean;
}
export interface DynamicImportConfig {
    loader?: string;
    strictSpecifier?: boolean;
}
/**
 * Options used to change the behavior of the compiler. At a minimum, `name` and `namespace` are
 * required.
 */
export interface TransformOptions {
    /** The name of the component. For example, the name in `<my-component>` is `"component"`. */
    name?: string;
    /** The namespace of the component. For example, the namespace in `<my-component>` is `"my"`. */
    namespace?: string;
    /** @deprecated Ignored by compiler. */
    stylesheetConfig?: StylesheetConfig;
    /** Config applied in usage of dynamic import statements in javascript */
    experimentalDynamicComponent?: DynamicImportConfig;
    /** Flag to enable usage of dynamic component(lwc:dynamic) directive in HTML template */
    experimentalDynamicDirective?: boolean;
    /** Flag to enable usage of dynamic component(lwc:is) directive in HTML template */
    enableDynamicComponents?: boolean;
    /** Flag to enable use of (a subset of) JavaScript expressions in place of template bindings. Passed to `@lwc/template-compiler`. */
    experimentalComplexExpressions?: boolean;
    /** Options to control what output gets generated. */
    outputConfig?: OutputConfig;
    /** Whether this is an explicit import. Passed to `@lwc/babel-plugin-component`. */
    isExplicitImport?: boolean;
    /** Whether the compiled HTML should include comments present in the source. */
    preserveHtmlComments?: boolean;
    /** Whether the CSS file being compiled is a scoped stylesheet. Passed to `@lwc/style-compiler`. */
    scopedStyles?: boolean;
    /** Whether the static content optimization should be enabled. Passed to `@lwc/template-compiler`. */
    enableStaticContentOptimization?: boolean;
    /** Custom renderer config to pass to `@lwc/template-compiler`. See that package's README for details. */
    customRendererConfig?: CustomRendererConfig;
    /** @deprecated Ignored by compiler. `lwc:spread` is always enabled. */
    enableLwcSpread?: boolean;
    /** Set to true if synthetic shadow DOM support is not needed, which can result in smaller output. */
    disableSyntheticShadowSupport?: boolean;
    /**
     * Enable transformations specific to {@link https://developer.salesforce.com/docs/platform/lwc/guide/security-lwsec-intro.html Lighting Web Security}.
     */
    enableLightningWebSecurityTransforms?: boolean;
    /**
     * Instrumentation object to gather metrics and non-error logs for internal use.
     * See the `@lwc/errors` package for details on the interface.
     */
    instrumentation?: InstrumentationObject;
    /** API version to associate with the compiled module. Values correspond to Salesforce platform releases. */
    apiVersion?: number;
    targetSSR?: boolean;
}
type RequiredTransformOptions = Omit<TransformOptions, 'name' | 'namespace' | 'scopedStyles' | 'customRendererConfig' | 'enableLwcSpread' | 'enableLightningWebSecurityTransforms' | 'enableDynamicComponents' | 'experimentalDynamicDirective' | 'experimentalDynamicComponent' | 'instrumentation'>;
export interface NormalizedTransformOptions extends RecursiveRequired<RequiredTransformOptions> {
    name?: string;
    namespace?: string;
    scopedStyles?: boolean;
    customRendererConfig?: CustomRendererConfig;
    enableLwcSpread?: boolean;
    enableLightningWebSecurityTransforms?: boolean;
    enableDynamicComponents?: boolean;
    experimentalDynamicDirective?: boolean;
    experimentalDynamicComponent?: DynamicImportConfig;
    instrumentation?: InstrumentationObject;
}
/**
 * Validates that the options conform to the expected shape and normalizes them to a standard format
 * @param options Input options
 * @returns Normalized options
 * @example
 * const normalizedOptions = validateTransformOptions({
 *   namespace: 'c',
 *   name: 'app',
 * })
 */
export declare function validateTransformOptions(options: TransformOptions): NormalizedTransformOptions;
export {};
