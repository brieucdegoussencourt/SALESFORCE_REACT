import * as t from '../shared/estree';
import { Attribute, BaseElement, ComplexExpression, Property } from '../shared/types';
import type CodeGen from './codegen';
/**
 * Bind the passed expression to the component instance. It applies the following
 * transformation to the expression:
 * - `{value}` --> `{$cmp.value}`
 * - `{value[index]}` --> `{$cmp.value[$cmp.index]}`
 * - `{foo ?? bar}` --> `{$cmp.foo ?? $cmp.bar}`
 * - `{foo?.bar}` --> `{$cmp.foo?.bar}`
 *
 * However, parameter variables are not be transformed in this way. For example,
 * the following transformations do not happen:
 * - `{(foo) => foo && bar}` --> `{(foo) => $cmp.foo && $cmp.bar}`
 * - `{(foo) => foo && bar}` --> `{($cmp.foo) => foo && $cmp.bar}`
 * - `{(foo) => foo && bar}` --> `{($cmp.foo) => $cmp.foo && $cmp.bar}`
 *
 * Instead, the scopes are respected:
 * - `{(foo) => foo && $cmp.bar}`
 *
 * Similar checks occur for local identifiers introduced via for:each or similar.
 * @param expression
 * @param codeGen
 */
export declare function bindComplexExpression(expression: ComplexExpression, codeGen: CodeGen): t.Expression;
export declare function bindAttributeExpression(attr: Attribute | Property, element: BaseElement, codeGen: CodeGen, addLegacySanitizationHook: boolean): import("estree").Identifier | import("estree").MemberExpression | import("estree").ArrayExpression | import("estree").ObjectExpression | import("estree").ArrowFunctionExpression | import("estree").UnaryExpression | import("estree").SimpleLiteral | import("estree").RegExpLiteral | import("estree").BigIntLiteral | import("estree").AssignmentExpression | import("estree").AwaitExpression | import("estree").BinaryExpression | import("estree").SimpleCallExpression | import("estree").NewExpression | import("estree").ChainExpression | import("estree").ClassExpression | import("estree").ConditionalExpression | import("estree").FunctionExpression | import("estree").ImportExpression | import("estree").LogicalExpression | import("estree").MetaProperty | import("estree").SequenceExpression | import("estree").TaggedTemplateExpression | import("estree").TemplateLiteral | import("estree").ThisExpression | import("estree").UpdateExpression | import("estree").YieldExpression;
