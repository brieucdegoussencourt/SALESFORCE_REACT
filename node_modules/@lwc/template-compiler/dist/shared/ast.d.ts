import { Token as parse5TokenInfo } from 'parse5';
import { Literal, SourceLocation, Element, ExternalComponent, Component, Expression, ComplexExpression, Comment, Text, ForEach, ForBlock, Slot, Identifier, Root, EventListener, KeyDirective, DynamicDirective, DomDirective, PreserveCommentsDirective, RenderModeDirective, Attribute, Property, ParentNode, BaseNode, ForOf, LWCDirectiveRenderMode, If, IfBlock, ElseBlock, ElseifBlock, ElementSourceLocation, InnerHTMLDirective, BaseElement, LWCDirectiveDomMode, RefDirective, SpreadDirective, ElementDirective, RootDirective, SlotBindDirective, ScopedSlotFragment, SlotDataDirective, IsDirective, LwcComponent, LwcTagName, BaseLwcElement } from './types';
export declare function root(parse5ElmLocation: parse5TokenInfo.ElementLocation): Root;
export declare function element(tagName: string, namespaceURI: string, parse5ElmLocation: parse5TokenInfo.ElementLocation): Element;
export declare function externalComponent(tagName: string, parse5ElmLocation: parse5TokenInfo.ElementLocation): ExternalComponent;
export declare function component(tagName: string, parse5ElmLocation: parse5TokenInfo.ElementLocation): Component;
export declare function lwcComponent(tagName: LwcTagName, parse5ElmLocation: parse5TokenInfo.ElementLocation): LwcComponent;
export declare function slot(slotName: string, parse5ElmLocation: parse5TokenInfo.ElementLocation): Slot;
export declare function text(raw: string, value: Literal | Expression | ComplexExpression, parse5Location: parse5TokenInfo.Location): Text;
export declare function comment(raw: string, value: string, parse5Location: parse5TokenInfo.Location): Comment;
export declare function elementSourceLocation(parse5ElmLocation: parse5TokenInfo.ElementLocation): ElementSourceLocation;
export declare function sourceLocation(location: parse5TokenInfo.Location): SourceLocation;
export declare function literal<T extends string | boolean>(value: T): Literal<T>;
export declare function forEach(expression: Expression, elementLocation: SourceLocation, directiveLocation: SourceLocation, item: Identifier, index?: Identifier): ForEach;
export declare function forOf(expression: Expression, iterator: Identifier, elementLocation: SourceLocation, directiveLocation: SourceLocation): ForOf;
export declare function scopedSlotFragment(identifier: Identifier, elementLocation: SourceLocation, directiveLocation: SourceLocation, slotName: Literal | Expression): ScopedSlotFragment;
export declare function ifNode(modifier: string, condition: Expression, elementLocation: SourceLocation, directiveLocation: SourceLocation): If;
export declare function ifBlockNode(condition: Expression, elementLocation: SourceLocation, directiveLocation: SourceLocation): IfBlock;
export declare function elseifBlockNode(condition: Expression, elementLocation: SourceLocation, directiveLocation: SourceLocation): ElseifBlock;
export declare function elseBlockNode(elementLocation: SourceLocation, directiveLocation: SourceLocation): ElseBlock;
export declare function eventListener(name: string, handler: Expression, location: SourceLocation): EventListener;
export declare function keyDirective(value: Expression, location: SourceLocation): KeyDirective;
export declare function dynamicDirective(value: Expression, location: SourceLocation): DynamicDirective;
export declare function lwcIsDirective(value: Expression, location: SourceLocation): IsDirective;
export declare function spreadDirective(value: Expression, location: SourceLocation): SpreadDirective;
export declare function slotBindDirective(value: Expression, location: SourceLocation): SlotBindDirective;
export declare function slotDataDirective(value: Identifier, location: SourceLocation): SlotDataDirective;
export declare function domDirective(lwcDomAttr: LWCDirectiveDomMode, location: SourceLocation): DomDirective;
export declare function innerHTMLDirective(value: Expression | Literal<string>, location: SourceLocation): InnerHTMLDirective;
export declare function refDirective(value: Literal<string>, location: SourceLocation): RefDirective;
export declare function preserveCommentsDirective(preserveComments: boolean, location: SourceLocation): PreserveCommentsDirective;
export declare function renderModeDirective(renderMode: LWCDirectiveRenderMode, location: SourceLocation): RenderModeDirective;
export declare function attribute(name: string, value: Expression | Literal, location: SourceLocation): Attribute;
export declare function property(name: string, attributeName: string, value: Expression | Literal, location: SourceLocation): Property;
export declare function isElement(node: BaseNode): node is Element;
export declare function isRoot(node: BaseNode): node is Root;
export declare function isExternalComponent(node: BaseNode): node is ExternalComponent;
export declare function isComponent(node: BaseNode): node is Component;
export declare function isSlot(node: BaseNode): node is Slot;
export declare function isBaseElement(node: BaseNode): node is BaseElement;
export declare function isBaseLwcElement(node: BaseNode): node is BaseLwcElement<LwcTagName>;
export declare function isLwcComponent(node: BaseNode): node is LwcComponent;
export declare function isText(node: BaseNode): node is Text;
export declare function isComment(node: BaseNode): node is Comment;
export declare function isExpression(node: BaseNode | Literal): node is Expression;
export declare function isStringLiteral(node: Expression | Literal | ComplexExpression): node is Literal<string>;
export declare function isBooleanLiteral(node: Expression | Literal): node is Literal<boolean>;
export declare function isForOf(node: BaseNode): node is ForOf;
export declare function isForEach(node: BaseNode): node is ForEach;
export declare function isForBlock(node: BaseNode): node is ForBlock;
export declare function isIf(node: BaseNode): node is If;
export declare function isIfBlock(node: BaseNode): node is IfBlock;
export declare function isElseifBlock(node: BaseNode): node is ElseifBlock;
export declare function isElseBlock(node: BaseNode): node is ElseBlock;
export declare function isConditionalParentBlock(node: BaseNode): node is IfBlock | ElseifBlock;
export declare function isConditionalBlock(node: BaseNode): node is IfBlock | ElseifBlock | ElseBlock;
export declare function isElementDirective(node: BaseNode): node is IfBlock | ElseifBlock | ElseBlock | ForBlock | If | ScopedSlotFragment;
export declare function isParentNode(node: BaseNode): node is ParentNode;
export declare function isDynamicDirective(directive: ElementDirective): directive is DynamicDirective;
export declare function isLwcIsDirective(directive: ElementDirective): directive is IsDirective;
export declare function isDomDirective(directive: ElementDirective): directive is DomDirective;
export declare function isSpreadDirective(directive: ElementDirective): directive is SpreadDirective;
export declare function isInnerHTMLDirective(directive: ElementDirective): directive is InnerHTMLDirective;
export declare function isRefDirective(directive: ElementDirective): directive is RefDirective;
export declare function isKeyDirective(directive: ElementDirective): directive is KeyDirective;
export declare function isSlotDataDirective(directive: ElementDirective): directive is SlotDataDirective;
export declare function isSlotBindDirective(directive: ElementDirective): directive is SlotBindDirective;
export declare function isRenderModeDirective(directive: RootDirective): directive is RenderModeDirective;
export declare function isPreserveCommentsDirective(directive: RootDirective): directive is PreserveCommentsDirective;
export declare function isProperty(node: BaseNode): node is Property;
export declare function isScopedSlotFragment(node: BaseNode): node is ScopedSlotFragment;
export declare function isAttribute(node: BaseNode): node is Attribute;
