/// <reference types="babel__traverse" />
/// <reference types="babel__template" />
import { NodePath } from "@babel/core";
import { types as BabelTypes } from "@babel/core";
import { types as t } from "@babel/core";
import { PublicReplacements } from "@babel/template";
declare function transformUnforgeables(): {
    name: string;
    visitor: {
        Program(path: NodePath<BabelTypes.Program>): void;
        Identifier(path: NodePath<BabelTypes.Node>): void;
        MemberExpression(path: NodePath<BabelTypes.MemberExpression>): void;
    };
};
type BuilderFunction = (replacements: Replacements) => ReturnType<typeof t.parenthesizedExpression>;
interface BuilderClassConstructor {
    new (code: string, options?: BuilderOptions): BuilderClass;
    create(code: string, options?: BuilderOptions): BuilderClass;
}
interface BuilderClass extends BuilderFunction {
    meta: BuilderMeta;
    _state: BuilderPluginState;
    _validator: BuilderValidator;
    getGlobalReplacement: (name: string) => Identifier | undefined;
    isGlobalReplacement: (globalName: string, idName: string) => boolean;
    isTransformed: BuilderValidator;
    setState: (state: BuilderPluginState) => void;
}
type BuilderMeta = {
    globals: Record<string, string>;
};
interface BuilderOptions {
    globals?: Record<string, string>;
    name?: string;
    validator?: BuilderValidator;
}
type BuilderPluginState = {
    getGlobalReplacement: (globalName: string) => Identifier | undefined;
    isGlobalReplacement(globalName: string, idName: string): boolean;
};
type BuilderValidator = (path: NodePath<any>) => boolean;
type Identifier = ReturnType<typeof t.identifier>;
type PrivatePluginState = {
    globals: {
        injected: Set<string>;
        toIds: Map<string, Identifier[]>;
        toReplacement: Map<string, Identifier>;
    };
    getAllBindingNames: () => Set<string>;
};
type Replacements = PublicReplacements & {
    [key: string]: any;
};
export { transformUnforgeables as default, BuilderClassConstructor, BuilderClass, BuilderMeta, BuilderOptions, BuilderPluginState, BuilderValidator, Identifier, PrivatePluginState, Replacements };
//# sourceMappingURL=index.cjs.d.ts.map